<?php

/**
 * @file
 */

module_load_include('inc', 'crm_message_template', 'crm_message_template.entity');

/**
 * Implements hook_views_api().
 */
function crm_message_template_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'crm_message_template') . '/includes/views',
  );
}

/**
 * Implements hook_hook_info().
 */
function crm_message_template_hook_info() {
  $hooks = array(
    'crm_message_template_uri' => array(
      'group' => 'crm',
    ),
    'crm_message_template_view' => array(
      'group' => 'crm',
    ),
    'crm_message_template_presave' => array(
      'group' => 'crm',
    ),
    'crm_message_template_update' => array(
      'group' => 'crm',
    ),
    'crm_message_template_insert' => array(
      'group' => 'crm',
    ),
    'crm_message_template_delete' => array(
      'group' => 'crm',
    ),
  );
  return $hooks;
}

/**
 * Implements hook_permission().
 */
function crm_message_template_permission() {
  return array(
    'crm message template overview' => array(
      'title' => t('Access to message list'),
    ),
    'crm message template create' => array(
      'title' => t('Create new message'),
    ),
    'crm message template view' => array(
      'title' => t('View message'),
    ),
    'crm message template update' => array(
      'title' => t('Update message'),
    ),
    'crm message template delete' => array(
      'title' => t('Delete message'),
    ),
  );
}

/**
 * Implements hook_crm_channel_fields_info().
 */
function crm_message_template_crm_channel_fields_info() {
  $types = crm_channel_types(TRUE);
  $array = array();
  foreach ($types as $key => $bundle) {
    $array['instances'][$key . '_crm_message_template_single'] = array(
      'label' => t('Message Template'),
      'widget' => array(
        'weight' => '5',
        'type' => 'entityreference_autocomplete',
        'module' => 'entityreference',
        'active' => 1,
        'settings' => array(
          'match_operator' => 'CONTAINS',
          'size' => '60',
          'path' => '',
        ),
      ),
      'settings' => array(
        'user_register_form' => FALSE,
      ),
      'display' => array(
        'default' => array(
          'label' => 'inline',
          'type' => 'entityreference_label',
          'weight' => 99,
          'settings' => array(
            'link' => 1,
          ),
          'module' => 'entityreference',
        ),
      ),
      'required' => 0,
      'description' => '',
      'default_value' => NULL,
      'field_name' => 'crm_message_template_single',
      'entity_type' => 'crm_message',
      'bundle' => $key,
      'deleted' => 0,
    );
  }
  drupal_alter('crm_message_template_crm_channel_fields_info', $array);
  return $array;
}

/**
 * Returns boolean value if channel is supported by message module or not.
 *
 * @param $type
 *
 * @return bool
 */
function _crm_message_template_channel_supported($type) {
  $entity = entity_get_info('crm_message_template');
  if (isset($entity['bundles'][$type])) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Returns list of types (bundles) in key => title format.
 *
 * @return array
 */
function crm_message_template_types() {
  // First check the static cache for a product types array.
  $message_types = &drupal_static(__FUNCTION__);

  // If it did not exist, fetch the types now.
  if (!isset($message_types)) {
    $message_types = array();

    $entity = entity_get_info('crm_message_template');
    if (isset($entity['bundles'])) {
      foreach ($entity['bundles'] as $key => $bundle) {
        // @todo: add something here or simplify it.
        $message_types[$key] = $bundle['label'];
      }
    }
  }

  return $message_types;
}

/**
 * Returns type label.
 */
function crm_message_template_type_get_name($type) {
  $types = crm_message_template_types();
  if (isset($types[$type])) {
    return $types[$type];
  }
  return NULL;
}

/**
 *
 */
function crm_message_template_menu_name_exists($value) {
  return db_query_range('SELECT 1 FROM {crm_message_template} WHERE name = :name', 0, 1, array(':name' => $value))->fetchField();
}

/**
 * Access callback: determines access to a product's translation tab.
 */
function crm_message_template_entity_translation_tab_access($template) {
  return entity_translation_tab_access('crm_message_template', $template);
}

/**
 * Access callback: determines access to a product's translation tab.
 */
function crm_message_template_entity_translation_supported_type($type) {
  return TRUE;
}

/**
 * @param object $template
 * @param object $channel
 * @param array $context
 *
 * @return bool|mixed
 *
 * @todo Add antiflood check?
 */
function crm_message_template_apply($template, $channel, $context = array()) {
  $message = crm_message_create(array(
    'channel' => $channel,
  ), 'crm_message');
  $template_wrapper = entity_metadata_wrapper('crm_message_template', $template);
  $message_wrapper = entity_metadata_wrapper('crm_message', $message);
  $fields = $template_wrapper->getPropertyInfo();

  // If crm_channel is missing - provide default context.
  $context += array(
    'crm_channel' => $channel,
  );

  foreach ($fields as $key => $field) {
    if (!isset($field['field']) || $field['field'] !== TRUE) {
      continue;
    }
    try {
      $value = $template_wrapper->{$key}->value();
      // @todo Figure out better to use token replacement.
      if (is_string($value)) {
        $value = token_replace($value, $context);
      }
      elseif (is_array($value) && isset($value['value']) && is_string($value['value'])) {
        $value['value'] = token_replace($value['value'], $context);
      }
      $message_wrapper->{$key}->set($value);
    }
    catch (Exception $e) {
      // Meh, whatever ;).
    }
  }

  $message_wrapper->crm_message_template_single->set($template);
  $message->log = 'New message created from template ' . $template->template_id;
  entity_save('crm_message', $message);
  return $message;
}
