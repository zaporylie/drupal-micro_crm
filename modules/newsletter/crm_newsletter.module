<?php

/**
 * @file
 * Blocks and logic behind newsletter integration.
 */

define('CRM_NEWSLETTER_CHANNEL_STATUS', 'newsletter');
define('CRM_NEWSLETTER_SUBSCRIBE_SINGLE_OPT', 'single_opt');
define('CRM_NEWSLETTER_SUBSCRIBE_DOUBLE_OPT', 'double_opt');

/**
 * Implements hook_menu().
 */
function crm_newsletter_menu() {
  $items = array();
  $items['admin/crm/config/newsletter'] = array(
    'title' => 'Newsletter',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_newsletter_settings'),
    'access arguments' => array('crm administer'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'crm_newsletter.admin.inc',
  );
  $items['crm/newsletter'] = array(
    'title' => 'Subscribe',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_newsletter_form'),
    'access arguments' => array('crm newsletter subscription'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['crm/newsletter/subscribe'] = array(
    'title' => 'Subscribe',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_newsletter_form'),
    'access arguments' => array('crm newsletter subscription'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['crm/newsletter/unsubscribe'] = array(
    'title' => 'Unsubscribe',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_newsletter_unsubscribe_form'),
    'access arguments' => array('crm newsletter subscription'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['crm/newsletter/unsubscribe/%crm_channel_token'] = array(
    'page callback' => 'crm_newsletter_unsubscribe_confirmation',
    'page arguments' => array(3),
    'access callback' => 'crm_channel_token_access_callback',
    'access arguments' => array(3),
    'type' => MENU_CALLBACK,
  );
  $items['crm/newsletter/subscribe/%crm_channel_token'] = array(
    'page callback' => 'crm_newsletter_subscribe_confirmation',
    'page arguments' => array(3),
    'access callback' => 'crm_channel_token_access_callback',
    'access arguments' => array(3),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_block_info().
 */
function crm_newsletter_block_info() {
  return array(
    'newsletter' => array(
      'info' => t('Newsletter'),
      'cache' => DRUPAL_NO_CACHE,
    ),
  );
}

/**
 * Implements hook_hook_info().
 */
function crm_newsletter_hook_info() {
  return array(
    'crm_newsletter_prepare_message' => array(
      'group' => 'crm',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function crm_newsletter_permission() {
  return array(
    'crm newsletter subscription' => array(
      'title' => t('Subscribe / unsubscribe newsletter'),
    ),
  );
}

/**
 * Implements hook_crm_channel_status_info().
 */
function crm_newsletter_crm_channel_status_info() {
  $statuses[CRM_NEWSLETTER_CHANNEL_STATUS] = array(
    'title' => t('Newsletter'),
    'state' => CRM_CHANNEL_STATE_ACTIVE,
  );
  return $statuses;
}

/**
 * Implements hook_block_view().
 */
function crm_newsletter_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'newsletter':
      $block['subject'] = t('Newsletter');
      if (user_access('crm newsletter subscription')) {
        $block['content'] = drupal_get_form('crm_newsletter_form');
        $block['content']['#attached']['css'][] = drupal_get_path('module', 'crm_newsletter') . '/crm_newsletter.css';
        $block['content'][] = array(
          '#weight' => 999,
          '#theme' => 'link',
          '#path' => 'crm/newsletter/unsubscribe',
          '#text' => t('Do you want to cancel your subscription?'),
          '#options' => array(
            'attributes' => array(),
            'html' => FALSE,
          ),
        );
      }
      else {
        $block['content'] = array();
      }
      break;
  }
  return $block;
}

/**
 * Newsletter form.
 */
function crm_newsletter_form($form, &$form_state) {
  $form['#tree'] = TRUE;

  if (!isset($form['#parents'])) {
    $form['#parents'] = array();
  }
  $form['bundles']['#tree'] = TRUE;
  foreach (_crm_newsletter_get_channels() as $channel) {
    $form['bundles'][$channel] = array(
      '#tree' => TRUE,
    );
    $entity = entity_create('crm_channel', array('type' => $channel));
    field_attach_form('crm_channel', $entity, $form['bundles'][$channel], $form_state);
    array_walk_recursive($form['bundles'][$channel], '_crm_reset_required');
  }

  $form['fields'] = array();
  foreach (_crm_newsletter_get_custom_fields() as $field) {
    $instance = field_info_instance('crm_contact', $field, 'crm_contact');
    // Make all custom fields not required.
    $instance['required'] = FALSE;
    $field = field_info_field($field);
    $form['fields'] += field_default_form('crm_contact', NULL, $field, $instance, LANGUAGE_NONE, NULL, $form, $form_state);
  }
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Subscribe'),
  );

  return $form;
}

/**
 * Resets required property so none field is required.
 */
function _crm_reset_required(&$value, $key) {
  if (($key === '#required') && ($value == TRUE)) {
    $value = FALSE;
  }
}

/**
 * @param $form
 * @param $form_state
 */
function crm_newsletter_form_validate(&$form, &$form_state) {
  $empty = 0;
  $channels = _crm_newsletter_get_channels();
  foreach ($channels as $channel) {
    $entity = entity_create('crm_channel', array('type' => $channel));
    field_attach_form_validate('crm_channel', $entity, $form, $form_state);
    // field_attach_submit('crm_channel', $entity, $form, $form_state);.
    if (crm_channel_is_empty($channel, $entity)) {
      $empty += 1;
    }
  }
  form_set_error(NULL, t('At least one channel field has to be filled'));
  if ($empty == count(_crm_newsletter_get_channels())) {
  }
}

/**
 * Newsletter form submit callback.
 */
function crm_newsletter_form_submit($form, &$form_state) {
  $channels = array();
  foreach (_crm_newsletter_get_channels() as $channel) {

    // Creates dummy entity.
    $entity = entity_create('crm_channel', array('type' => $channel));

    // Attach all fields to entity.
    field_attach_submit('crm_channel', $entity, $form, $form_state);

    if (crm_channel_is_empty($channel, $entity)) {
      // Skip if channel is empty.
      continue;
    }

    if (!crm_channel_is_unique($channel, $entity)) {
      // Load channel if it already exists.
      $entity = crm_channel_values_load($entity);
      if (!is_object($entity)) {
        watchdog('crm_newsletter', 'Unable to load channel', array(), WATCHDOG_WARNING);
        return;
      }
    }

    if (isset($entity->status) && $entity->status == CRM_NEWSLETTER_CHANNEL_STATUS) {
      drupal_set_message(t('!channel: Thank you for subscribing to our newsletter.', array('!channel' => entity_label('crm_channel', $entity))));
      continue;
    }
    // Save channel as a newsletter ready.
    $entity->status = CRM_NEWSLETTER_CHANNEL_STATUS;
    $entity->revision = TRUE;
    try {
      entity_save('crm_channel', $entity);
    }
    catch (Exception $e) {
      watchdog_exception('crm_newsletter', $e);
      drupal_set_message(t('!channel: Unable to submit form. Please try again or contact administrator.', array('!channel' => crm_channel_label($entity))), 'error');
      $form_state['redirect'] = TRUE;
      return;
    }

    // Add to channels array to attach it later to contact.
    $channels[$entity->channel_id] = $entity->channel_id;
  }

  if (count($channels)) {
    // Process entity only if there is something to process.
    $entity = crm_contact_load_by_channels(array_keys($channels));

    if (is_array($entity) && count($entity) > 1) {
      // If more than one contact found - merge it together.
      $entity = crm_contact_merge($entity);
    }
    elseif (is_array($entity)) {
      // If array contains only one.
      $entity = reset($entity);
    }

    // If contact status was in disabled state, bump it to registered.
    $entity->status = CRM_CONTACT_STATUS_REGISTERED;
    if (isset($form_state['values']['fields']) && is_array($form_state['values']['fields'])) {
      foreach ($form_state['values']['fields'] as $key => $field) {
        $info = field_info_field($key);
        $entity->{$key} = $field;
        // Check if field is empty and, if so, skip it.
        if (module_invoke($info['module'], 'field_is_empty', $entity->{$key}[LANGUAGE_NONE][0], $info)) {
          unset($entity->{$key});
        }
      }
    }
    $wrapper = entity_metadata_wrapper('crm_contact', $entity);

    $tmp = array();
    foreach ($wrapper->crm_channel->getIterator() as $channel) {
      $tmp[] = $channel->getIdentifier();
    }
    foreach ($channels as $channel) {
      if (!in_array($channel, $tmp)) {
        $wrapper->crm_channel[] = $channel;
      }
    }

    $entity->log = t('Contact modified by newsletter form.');
    $entity->revision = TRUE;
    try {
      entity_save('crm_contact', $entity);
    }
    catch (Exception $e) {
      watchdog_exception('crm_newsletter', $e);
      drupal_set_message(t('Unable to submit form. Please try again or contact administrator'), 'error');
      $form_state['redirect'] = TRUE;
      return;
    }
  }
}

/**
 * @param $form
 * @param $form_state
 */
function crm_newsletter_unsubscribe_form($form, &$form_state) {

  $form['#tree'] = TRUE;

  if (!isset($form['#parents'])) {
    $form['#parents'] = array();
  }
  $form['bundles']['#tree'] = TRUE;
  foreach (_crm_newsletter_get_channels() as $channel) {
    $form['bundles'][$channel] = array(
      '#tree' => TRUE,
    );
    $entity = entity_create('crm_channel', array('type' => $channel));
    field_attach_form('crm_channel', $entity, $form['bundles'][$channel], $form_state);
    array_walk_recursive($form['bundles'][$channel], '_crm_reset_required');
  }

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Unsubscribe'),
  );

  return $form;
}

/**
 * @param $form
 * @param $form_state
 */
function crm_newsletter_unsubscribe_form_validate($form, &$form_state) {
  foreach (_crm_newsletter_get_channels() as $channel) {
    $entity = entity_create('crm_channel', array('type' => $channel));
    field_attach_form_validate('crm_channel', $entity, $form, $form_state);
  }
}

/**
 * Unsubscribe form submit callback.
 */
function crm_newsletter_unsubscribe_form_submit($form, &$form_state) {
  foreach (_crm_newsletter_get_channels() as $type) {

    // Creates dummy entity.
    $channel = entity_create('crm_channel', array('type' => $type));

    // Attach all fields to entity.
    field_attach_submit('crm_channel', $channel, $form, $form_state);

    if (crm_channel_is_empty($type, $channel)) {
      // Skip if channel is empty.
      continue;
    }

    if (!($entity = crm_channel_values_load($channel))) {
      // Load channel if it already exists.
      drupal_set_message(t('!channel does not exist in our records.', array('!channel' => crm_channel_channel($channel))), 'warning');
      continue;
    }
    $channel = $entity;
    if (isset($channel->status) && $channel->status != CRM_NEWSLETTER_CHANNEL_STATUS) {
      drupal_set_message(t('!channel: You will not receive newsletter messages anymore.', array('!channel' => entity_label('crm_channel', $channel))));
      continue;
    }
    $channel->status = CRM_CHANNEL_STATUS_REGISTERED;
    try {
      entity_save('crm_channel', $channel);
    }
    catch (Exception $e) {
      watchdog_exception('crm_newsletter', $e);
      drupal_set_message(t('!channel: Unable to submit form. Please try again or contact administrator', array('!channel' => crm_channel_channel($channel))), 'error');
      $form_state['redirect'] = TRUE;
      return;
    }
  }
}

/**
 * @param $channel
 */
function crm_newsletter_unsubscribe_confirmation($channel) {
  try {
    $channel->status = CRM_CHANNEL_STATUS_REGISTERED;
    $channel->log = 'Channel does not want to receive newsletter messages';
    $channel->skip_confirmation = TRUE;
    entity_save('crm_channel', $channel);
    drupal_set_message(t('!channel: Subscription has been canceled.', array('!channel' => crm_channel_label($channel))));
  }
  catch (Exception $e) {
    watchdog_exception('crm_newsletter', $e);
    drupal_set_message(t('!channel: Unable to change subscription status', array('!channel' => crm_channel_label($channel))), 'error');
  }
  drupal_goto('<front>');
}

/**
 * @param $channel
 */
function crm_newsletter_subscribe_confirmation($channel) {
  try {
    $channel->status = CRM_NEWSLETTER_CHANNEL_STATUS;
    $channel->log = 'Channel wants to receive newsletter messages';
    $channel->skip_confirmation = TRUE;
    entity_save('crm_channel', $channel);
    drupal_set_message(t('!channel: Subscription completed.', array('!channel' => crm_channel_label($channel))));
  }
  catch (Exception $e) {
    watchdog_exception('crm_newsletter', $e);
    drupal_set_message(t('!channel: Unable to change subscription status', array('!channel' => crm_channel_label($channel))), 'error');
  }
  drupal_goto('<front>');
}

/**
 * Implements hook_crm_channel_presave().
 */
function crm_newsletter_crm_channel_presave($channel) {
  if (isset($channel->skip_confirmation) && $channel->skip_confirmation == TRUE) {
    // If it's confirmation - skip confirmation logic.
  }
  elseif (!isset($channel->original) && $channel->status == CRM_NEWSLETTER_CHANNEL_STATUS) {
    $channel->newsletter = TRUE;
  }
  elseif (isset($channel->original) && $channel->original->status == CRM_NEWSLETTER_CHANNEL_STATUS && $channel->status <> $channel->original->status) {
    $channel->newsletter = FALSE;
  }
  elseif (isset($channel->original) && $channel->status == CRM_NEWSLETTER_CHANNEL_STATUS && $channel->status <> $channel->original->status) {
    $channel->newsletter = TRUE;
  }

  if (isset($channel->newsletter) && $channel->newsletter == FALSE) {
    $method = variable_get('crm_channel_ui_' . $channel->type . '_newsletter', CRM_NEWSLETTER_SUBSCRIBE_SINGLE_OPT);
    if ($method == CRM_NEWSLETTER_SUBSCRIBE_DOUBLE_OPT && function_exists('_crm_message_channel_supported') && _crm_message_channel_supported($channel->type)) {
      _crm_channel_generate_token($channel);
      $channel->status = CRM_NEWSLETTER_CHANNEL_STATUS;
      $channel->log = 'Channel token has been generated';
    }
    else {
      // Disable newsletter status for channel..
      $channel->status = CRM_CHANNEL_STATUS_REGISTERED;
      $channel->log = 'Channel does not want to receive newsletter messages';
    }
  }
  elseif (isset($channel->newsletter) && $channel->newsletter == TRUE) {
    $method = variable_get('crm_channel_ui_' . $channel->type . '_newsletter', CRM_NEWSLETTER_SUBSCRIBE_SINGLE_OPT);
    if ($method == CRM_NEWSLETTER_SUBSCRIBE_DOUBLE_OPT && function_exists('_crm_message_channel_supported') && _crm_message_channel_supported($channel->type)) {
      _crm_channel_generate_token($channel);
      $channel->status = isset($channel->original) ? $channel->original->status : CRM_CHANNEL_STATUS_REGISTERED;
      $channel->log = 'Channel token has been generated';
    }
    else {
      // Disable newsletter status for channel..
      $channel->status = CRM_NEWSLETTER_CHANNEL_STATUS;
      $channel->log = 'Channel wants to receive newsletter messages';
    }
  }
}

/**
 * Implements hook_crm_channel_insert().
 */
function crm_newsletter_crm_channel_insert($channel) {
  _crm_newsletter_set_and_send_message($channel);
}

/**
 * Implements hook_crm_channel_update().
 */
function crm_newsletter_crm_channel_update($channel) {
  _crm_newsletter_set_and_send_message($channel);
}

/**
 * Set status message and/or send message via channel.
 *
 * @param $channel
 */
function _crm_newsletter_set_and_send_message($channel) {
  if (isset($channel->newsletter) && $channel->newsletter == FALSE) {
    $method = variable_get('crm_channel_ui_' . $channel->type . '_newsletter', CRM_NEWSLETTER_SUBSCRIBE_SINGLE_OPT);
    if ($method == CRM_NEWSLETTER_SUBSCRIBE_DOUBLE_OPT && function_exists('_crm_message_channel_supported') && _crm_message_channel_supported($channel->type)) {

      // Build default context.
      $context = array(
        'crm_channel' => $channel,
      );
      // If contact exists - load it as a context.
      if (function_exists('crm_contact_load_by_channels')) {
        $context['crm_contact'] = crm_contact_load_by_channels($channel->channel_id);
      }

      if ((($template = crm_channel_template_name_load('unsubscribe_' . $channel->type)) && ($message = crm_message_template_apply($template, $channel, $context))) && crm_message_send($message)) {
        drupal_set_message(t('!channel: Message has been sent. Click on the confirmation link to complete.', array('!channel' => crm_channel_label($channel))), 'warning');
      }
      else {
        drupal_set_message(t('!channel: Unable to send message. Try again.', array('!channel' => crm_channel_label($channel))), 'error');
      }
    }
    else {
      drupal_set_message(t('You will not receive newsletter messages any more.'));
    }
  }
  elseif (isset($channel->newsletter) && $channel->newsletter == TRUE) {
    $method = variable_get('crm_channel_ui_' . $channel->type . '_newsletter', CRM_NEWSLETTER_SUBSCRIBE_SINGLE_OPT);
    if ($method == CRM_NEWSLETTER_SUBSCRIBE_DOUBLE_OPT && function_exists('_crm_message_channel_supported') && _crm_message_channel_supported($channel->type)) {

      // Build default context.
      $context = array(
        'crm_channel' => $channel,
      );
      // If contact exists - load it as a context.
      if (function_exists('crm_contact_load_by_channels')) {
        $context['crm_contact'] = crm_contact_load_by_channels($channel->channel_id);
      }

      if ((($template = crm_channel_template_name_load('subscribe_' . $channel->type)) && ($message = crm_message_template_apply($template, $channel, $context))) && crm_message_send($message)) {
        drupal_set_message(t('!channel: Message has been sent. Click on the confirmation link to complete.', array('!channel' => crm_channel_label($channel))), 'warning');
      }
      else {
        drupal_set_message(t('!channel: Unable to send message. Try again.', array('!channel' => crm_channel_label($channel))), 'error');
      }
    }
    else {
      drupal_set_message(t('!channel has been added to newsletter.', array('!channel' => crm_channel_label($channel))));
    }
  }
}

/**
 * @return array
 *   Array of channels in key => key format.
 */
function _crm_newsletter_get_channels() {
  $channels = array();
  foreach (variable_get('crm_newsletter_channels', array()) as $channel) {
    if ($channel === 0) {
      continue;
    }
    $channels[$channel] = $channel;
  }
  return $channels;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function crm_newsletter_form_crm_channel_ui_settings_alter(&$form, &$form_state) {
  if (isset($form_state['build_info']['args'][0]) && $type = $form_state['build_info']['args'][0]) {
    if (function_exists('_crm_message_channel_supported') && _crm_message_channel_supported($type)) {
      $form['crm_channel_ui_' . $type . '_newsletter'] = array(
        '#type' => 'radios',
        '#title' => t('Subscription'),
        '#default_value' => variable_get('crm_channel_ui_' . $type . '_newsletter', CRM_NEWSLETTER_SUBSCRIBE_SINGLE_OPT),
        '#options' => array(
          CRM_NEWSLETTER_SUBSCRIBE_SINGLE_OPT => t('Single opt'),
          CRM_NEWSLETTER_SUBSCRIBE_DOUBLE_OPT => t('Double opt'),
        ),
      );
    }
  }
}

/**
 * @return array
 *   Array of channels in key => key format.
 */
function _crm_newsletter_get_custom_fields() {
  $custom_fields = array();
  foreach (variable_get('crm_newsletter_custom_fields', array()) as $custom_field) {
    if ($custom_field === 0) {
      continue;
    }
    $custom_fields[$custom_field] = $custom_field;
  }
  return $custom_fields;
}

/**
 * Implements hook_modules_enabled().
 */
function crm_newsletter_modules_enabled($modules) {
  _crm_newsletter_create_messages();
}

/**
 * Implements hook_enable().
 */
function crm_newsletter_enable() {
  _crm_newsletter_create_messages();
}

/**
 * Generates newsletter default messages.
 */
function _crm_newsletter_create_messages() {

  $types = crm_channel_types(TRUE);
  foreach ($types as $key => $type) {
    // @todo Check if message exists or not.
    if (!crm_message_template_exists_by_name('subscribe_' . $key)) {
      $subscribe = array(
        'subject' => t('Confirm your subscription'),
        'body' => t('Click link to confirm [crm_channel:subscribe-url]'),
      );
      // @todo Use wrapper function instead of calling module_invoke directly.
      if ($message = module_invoke($type['module'], 'crm_message_create', $subscribe, 'crm_message_template')) {
        $message->name = 'subscribe_' . $key;
        $message->locked = 1;
        $message->log = 'Create default newsletter message.';
        entity_save('crm_message_template', $message);
      }
    }
    if (!crm_message_template_exists_by_name('unsubscribe_' . $key)) {
      $subscribe = array(
        'subject' => t('Cancel your newsletter subscription'),
        'body' => t('Thank you for being with us. Click to confirm [crm_channel:unsubscribe-url]'),
      );
      // @todo Use wrapper function instead of calling module_invoke directly.
      if ($message = module_invoke($type['module'], 'crm_message_create', $subscribe, 'crm_message_template')) {
        $message->name = 'unsubscribe_' . $key;
        $message->locked = 1;
        $message->log = 'Create default newsletter message.';
        entity_save('crm_message_template', $message);
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function crm_newsletter_form_crm_channel_ui_form_alter(&$form, &$form_state, $form_id) {
  $form['settings']['options']['skip_confirmation'] = array(
    '#type' => 'checkbox',
    '#title' => t('Skip confirmation'),
    '#default_value' => FALSE,
  );
  $form['#validate'][] = 'crm_newsletter_skip_confirmation';
}

/**
 * Add administration option to skip sending message to channel.
 */
function crm_newsletter_skip_confirmation(&$form, &$form_state) {
  $form_state['values']['channel']->skip_confirmation = $form_state['values']['skip_confirmation'];
}
